*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main1.ll'
source_filename = "main1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@a = dso_local global i32 0, align 4
@b = dso_local global i32 1, align 4
@i = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [40 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5\E6\96\90\E6\B3\A2\E9\82\A3\E5\A5\91\E6\95\B0\E5\88\97\E7\9A\84\E9\A1\B9\E6\95\B0\EF\BC\9A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%d\0A%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main1.ll'
source_filename = "main1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@a = dso_local global i32 0, align 4
@b = dso_local global i32 1, align 4
@i = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [40 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5\E6\96\90\E6\B3\A2\E9\82\A3\E5\A5\91\E6\95\B0\E5\88\97\E7\9A\84\E9\A1\B9\E6\95\B0\EF\BC\9A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%d\0A%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* @i, align 4
  %3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %2)
  %5 = load i32, i32* %2, align 4
  call void @print_fibonacci_sequence(i32 noundef %5)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def $eflags
400B	  $eax = COPY %0:gr32
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def $eflags
400B	  $eax = COPY %0:gr32
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %3:gr64
  $rsi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  %6:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %6:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %3:gr64 = MOV64ri @.str.1
  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %3:gr64
  $rsi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %2:gr32
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY killed %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY killed %3:gr64
224B	  $rsi = COPY killed %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY killed %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY killed %0:gr32
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY killed %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY killed %3:gr64
224B	  $rsi = COPY killed %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY killed %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY killed %0:gr32
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY %0:gr32
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY %0:gr32
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY killed $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY killed $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  %6:gr64 = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $rdi = COPY %6:gr64
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  dead %7:gr32 = COPY $eax
160B	  %3:gr64 = MOV64ri @.str.1
176B	  %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = COPY %3:gr64
224B	  $rsi = COPY %4:gr64
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  dead %5:gr32 = COPY $eax
304B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $edi = COPY %2:gr32
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
48B	  renamable $rdi = MOV64ri @.str
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
96B	  $al = MOV8ri 0
112B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
176B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $al = MOV8ri 0
256B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $noreg, 1, $noreg, @i, $noreg, 1 :: (store (s32) into @i)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -4, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CALL64pcrel32 @print_fibonacci_sequence, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

; Loop:
7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

; Exit blocks
21:                                               ; preds = %7
  ret void
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

; Loop:
7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

; Exit blocks
21:                                               ; preds = %7
  ret void
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

; Loop:
7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

; Exit blocks
21:                                               ; preds = %7
  ret void
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

; Loop:
7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

; Exit blocks
21:                                               ; preds = %7
  ret void
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_fibonacci_sequence(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @a, align 4
  %5 = load i32, i32* @b, align 4
  %6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 noundef %4, i32 noundef %5)
  br label %7

7:                                                ; preds = %11, %1
  %8 = load i32, i32* @i, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %7
  %12 = load i32, i32* @b, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @a, align 4
  %14 = load i32, i32* @b, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* @b, align 4
  %16 = load i32, i32* @b, align 4
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 noundef %16)
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* @a, align 4
  %19 = load i32, i32* @i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @i, align 4
  br label %7, !llvm.loop !6

21:                                               ; preds = %7
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
384B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
400B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
416B	  %17:gr64 = MOV64ri @.str.3
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %17:gr64
464B	  $esi = COPY %20:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  %19:gr32 = COPY $eax
544B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
560B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
576B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
592B	  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
608B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
624B	  JMP_1 %bb.1

640B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

656B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
384B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
400B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
416B	  %17:gr64 = MOV64ri @.str.3
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %17:gr64
464B	  $esi = COPY %20:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  %19:gr32 = COPY $eax
544B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
560B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
576B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
592B	  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
608B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
624B	  JMP_1 %bb.1

640B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

656B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $esi = COPY %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm killed %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function print_fibonacci_sequence: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm killed %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm killed %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = ADD32rm killed %25:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = COPY killed %25:gr32
  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = COPY killed %14:gr32
  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %2:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  %24:gr32 = COPY killed %25:gr32
  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  %17:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $esi = COPY killed %20:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  %13:gr32 = COPY killed %14:gr32
  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %2:gr64
144B	  $esi = COPY killed %7:gr32
160B	  $edx = COPY killed %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = COPY killed %25:gr32
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY killed %17:gr64
480B	  $esi = COPY killed %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
592B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
608B	  %13:gr32 = COPY killed %14:gr32
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %2:gr64
144B	  $esi = COPY killed %7:gr32
160B	  $edx = COPY killed %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = COPY killed %25:gr32
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY killed %17:gr64
480B	  $esi = COPY killed %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed %16:gr32 :: (store (s32) into @a)
592B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
608B	  %13:gr32 = COPY killed %14:gr32
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = COPY %25:gr32
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
608B	  %13:gr32 = COPY %14:gr32
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %25:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
368B	  %24:gr32 = COPY %25:gr32
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %14:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
608B	  %13:gr32 = COPY %14:gr32
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY killed $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY killed $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.2)
64B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  %6:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  %2:gr64 = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %2:gr64
144B	  $esi = COPY %7:gr32
160B	  $edx = COPY %6:gr32
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  dead %5:gr32 = COPY $eax

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %10:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  %27:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %27:gr32 :: (store (s32) into %ir.3)
352B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  %24:gr32 = ADD32rm %24:gr32(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, %24:gr32 :: (store (s32) into @b)
416B	  %20:gr32 = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  %17:gr64 = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  $rdi = COPY %17:gr64
480B	  $esi = COPY %20:gr32
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %19:gr32 = COPY $eax
560B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, %16:gr32 :: (store (s32) into @a)
592B	  %13:gr32 = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  %13:gr32 = ADD32ri8 %13:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, %13:gr32 :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
64B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
80B	  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
96B	  renamable $rdi = MOV64ri @.str.2
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $al = MOV8ri 0
192B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

240B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
272B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
288B	  JCC_1 %bb.3, 13, implicit killed $eflags

304B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1

320B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
336B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
352B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
384B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
400B	  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
416B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
432B	  renamable $rdi = MOV64ri @.str.3
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  $al = MOV8ri 0
512B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
576B	  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
592B	  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
624B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
640B	  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
656B	  JMP_1 %bb.1

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.1

688B	  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function print_fibonacci_sequence: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $edx = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @a, $noreg :: (load (s32) from @a)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @b, $noreg, implicit-def dead $eflags :: (load (s32) from @b)
  MOV32mr $noreg, 1, $noreg, @b, $noreg, killed renamable $eax :: (store (s32) into @b)
  renamable $esi = MOV32rm $noreg, 1, $noreg, @b, $noreg :: (load (s32) from @b)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $noreg, 1, $noreg, @a, $noreg, killed renamable $eax :: (store (s32) into @a)
  renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load (s32) from @i)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $noreg, 1, $noreg, @i, $noreg, killed renamable $eax :: (store (s32) into @i)
  JMP_1 %bb.1

bb.3 (%ir-block.21):
; predecessors: %bb.1

  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_fibonacci_sequence.

