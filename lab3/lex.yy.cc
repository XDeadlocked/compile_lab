
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[395] =
    {   0,
        0,    0,    0,    0,  126,  125,  124,    1,   30,  125,
      125,   20,   50,  125,   12,   14,   49,   47,   51,   48,
       43,   19,    6,    6,   52,   36,   42,   38,  117,   45,
       46,   32,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   11,   31,   13,   33,    4,    4,   41,    0,  122,
        0,    0,   25,   34,    0,   23,    0,   21,    0,   22,
       44,    3,    2,   24,    0,    6,    0,    6,   26,   37,
       40,   39,   27,    0,   18,   17,   15,   16,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,   77,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,   35,    5,    0,    0,  123,
        0,  120,    0,  121,    2,    8,    8,    7,   28,   29,
      118,  119,   53,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   74,  117,  117,  117,   79,   80,  117,  117,
      117,   84,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      103,  117,  117,  117,  117,  117,  117,  117,  117,  117,
        0,    0,  120,  121,   54,   55,  117,  117,   57,  117,
       59,  117,  117,  117,  117,  117,  117,  117,   68,   69,
      117,  117,  117,  117,  117,   76,  117,   81,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  100,  117,  102,  117,  117,
      117,  117,  117,  111,  117,  117,  117,    0,    0,   56,
      117,   58,   60,   61,  117,  117,  117,  117,  117,  117,
      117,   72,   73,  117,  117,    0,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   92,  117,  117,  117,

      117,  117,  117,  101,  117,  117,  117,  107,  117,  109,
      117,  117,  117,  114,    0,    0,   62,  117,   67,  117,
       65,   66,  117,   71,   75,   78,    0,    0,  117,  117,
      117,  117,  117,   88,   90,  117,   91,   96,   93,   94,
       95,   97,   98,  117,  117,  105,  117,  117,  117,  117,
      117,   10,    0,  117,   64,  117,    0,    0,   82,  117,
      117,   86,  117,  117,  117,  104,  117,  117,  110,  117,
      113,   10,    9,   63,   70,    0,    0,  117,   85,  117,
       89,   99,  106,  108,  112,    9,    9,    0,  115,   83,
       87,    0,  116,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,    1,   21,   22,
       23,   24,    1,    1,   25,   25,   25,   25,   25,   25,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       27,    1,   28,   29,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   26,   40,   41,   42,   43,
       44,   45,   26,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[59] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    4,    5,
        1,    1,    4,    4,    1,    4,    1,    1,    6,    6,
        1,    1,    1,    1,    7,    8,    1,    1,    1,    8,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[407] =
    {   0,
        0,    0,  605,  602,  610, 1062, 1062, 1062,  584,  580,
       25,  560,  505,    0, 1062, 1062,  488,   46, 1062,   47,
     1062,   49,   56,   60, 1062,   43,  464,   58,   81, 1062,
     1062, 1062,  107,   42,   84,   57,   83,   96,   49,  103,
       56,   70,  113,   89,  112,  133,  127,  146,  104,  147,
      164, 1062,  421, 1062, 1062, 1062,  436, 1062,  397, 1062,
      360,  347, 1062, 1062,  376, 1062,  167, 1062,  185, 1062,
     1062, 1062,    0, 1062,   93,  181,    0,  186,  307, 1062,
     1062, 1062,  306,  201, 1062, 1062,  290,  281,  130,  174,
      160,  175,  183,  179,  186,  136,  189,  182,  194,  201,

      197,  198,  202,  207,  212,  213,  217,  226,  220,  223,
      230,  237,  234,  243,  240,  253,  254,  262,  263,  258,
      266,  270,  271,  285,  288,  279,  294,  289,  299,  300,
      306,  305,  317,  312,  318, 1062, 1062,  240,  225, 1062,
      320,    0,  366,    0,    0,  153,  220,    0, 1062, 1062,
     1062, 1062,  313,  327,  331,  332,  342,  347,  350,  338,
      328,  353,  357,  361,  358,  366,  374,  369,  373,  377,
      370,  394,  380,  393,  386,  397,  385,  390,  401,  400,
      410,  404,  409,  413,  417,  420,  421,  432,  425,  442,
      429,  437,  447,  450,  436,  453,  443,  446,  459,  469,

      458,  474,  466,  473,  481,  478,  485,  486,  498,  490,
      165,  149,    0,    0,  489,  493,  501,  497,  502,  505,
      506,  509,  512,  518,  515,  519,  522,  531,  526,  527,
      538,  535,  544,  541,  549,  548,  556,  559,  562,  553,
      570,  573,  577,  574,  567,  578,  582,  583,  586,  601,
      593,  600,  605,  608,  604,  597,  609,  612,  628,  621,
      629,  632,  616,  625,  635,  639,  645,  121,  106,  640,
      648,  644,  651,  652,  659,  656,  666,  674,  675,  678,
      669,  670,  679,  686,  694,  723,  693,  699,  702,  705,
      698,  722,  711,  714,  723,  726,  718,  734,  740,  744,

      731,  747,  751,  737,  755,  754,  761,  748,  762,  765,
      768,  774,  777,  769,  114,  107,  773,  778,  781,  784,
      787,  788,  799,  792,  793,  796,   85,   74,  809,  816,
      805,  815,  812,  804,  808,  831,  820,  821,  824,  825,
      828,  832,  835,  838,  847,  841,  850,  854,  857,  861,
      864,    0,   72,  858,  867,  870,   53,   56,  873,  876,
      880,  881,  886,  885,  889,  890,  905,  908,  894,  909,
      898,    0,  944,  902,  912,   46,   37,  915,  916,  919,
      920,  923,  924,  927,  928,    0,  976,   27, 1062,  932,
      935,   26, 1062, 1062,  984,  992, 1000, 1007, 1014, 1021,

     1029, 1032, 1034, 1037, 1045, 1053
    } ;

static const flex_int16_t yy_def[407] =
    {   0,
      394,    1,  395,  395,  394,  394,  394,  394,  394,  396,
      394,  394,  394,  397,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  398,  394,
      394,  394,  398,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,  394,  394,  394,  394,  394,  394,  394,  396,  394,
      394,  394,  394,  394,  394,  394,  399,  394,  400,  394,
      394,  394,  401,  394,  394,  394,  402,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,  394,  394,  394,  394,  394,
      399,  403,  400,  404,  401,  394,  394,  402,  394,  394,
      394,  394,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
      394,  394,  403,  404,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,  394,  394,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,  394,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,  394,  394,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,  394,  394,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,  405,  394,   33,   33,   33,  394,  394,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,  405,  406,   33,   33,  394,  394,   33,   33,   33,
       33,   33,   33,   33,   33,  406,  406,  394,  394,   33,
       33,  394,  394,    0,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394
    } ;

static const flex_int16_t yy_nxt[1121] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   29,   30,   31,   32,   29,
       33,   34,   35,   36,   37,   38,   39,   29,   40,   29,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   29,   29,   29,   52,   53,   54,   55,   61,   67,
      393,   72,   69,   62,   79,   80,   73,  392,   68,   70,
       71,   74,   75,  389,   76,   76,   75,  388,   76,   78,
       82,   83,   84,   84,   84,   92,   99,   93,   89,   85,
       89,  100,  109,   86,   87,   89,   88,   89,  377,  112,

      101,  376,   89,   89,   89,   89,  373,   77,   84,   84,
       84,  146,  147,   94,   95,   85,   89,  358,  113,   86,
       87,   96,   88,  102,   97,  103,  105,   98,  357,   89,
       89,   89,   89,  116,  104,   89,  106,   89,  110,  107,
      353,  108,   89,  114,   89,  111,  130,  115,  352,   89,
      131,   89,   89,   90,  316,   91,  121,  117,   89,   89,
      118,   89,  119,  315,  122,  123,  160,  120,  141,  141,
      141,  146,  146,   89,  124,   89,   89,  125,   89,   89,
      126,   89,   89,  127,   89,  132,  143,  143,  143,  269,
      133,  128,   89,   89,   89,   89,  134,   75,  129,   76,

       76,  135,   75,  268,   76,   78,   89,  154,   89,   85,
       89,  157,   89,   86,   87,  153,   88,  156,  155,  161,
       89,   89,   89,   89,  162,   89,  163,   89,   89,   89,
       89,   89,  158,  159,   89,   89,  164,   89,  146,  147,
       89,  165,   89,   89,  167,  166,   89,   89,   89,   89,
      168,  169,  171,   89,  170,   89,  172,  212,   89,   89,
       89,   89,  173,   89,  174,   89,   89,  175,   89,   89,
      176,   89,   89,  178,   89,  211,   89,  177,   89,  179,
       89,  180,   89,   89,  181,   89,   89,  183,   89,   89,
      182,   89,  184,  186,  188,  187,  152,  185,  190,   89,

       89,   89,   89,  151,   89,  189,   89,  192,   89,   89,
       89,   89,   89,  191,   89,  194,   89,   89,   89,   89,
      197,  394,  394,  394,  193,   89,  196,   89,  150,  149,
      195,   89,  198,   89,   89,   89,   89,  200,  203,  199,
       89,  201,   89,  202,  205,   89,  204,   89,   89,  209,
      206,   89,   89,   89,   89,  207,  210,  208,   89,   89,
       89,   89,  217,   89,   89,   89,   89,  394,  394,  394,
      215,  216,  218,   89,  222,   89,   89,   89,   89,   89,
       89,  219,  220,  221,   89,  140,   89,  225,   89,  139,
       89,  226,  227,   89,  138,   89,   89,  228,   89,  223,

      224,   89,   60,   89,   89,   89,   89,   89,  229,   89,
      230,  232,   89,  231,   89,   89,  233,   89,   89,   89,
       89,   89,   89,   89,  234,   89,   89,  235,   89,  236,
      239,   89,   89,   89,   89,  237,   89,  238,   89,   89,
       89,   89,   89,   89,  240,   89,   89,   89,   89,   89,
       89,  245,   89,  137,  241,   89,   89,   89,   89,   89,
      244,   89,  242,   89,  243,   89,   89,   89,   89,   89,
      246,   89,  248,  247,  249,   89,  136,   89,   89,  250,
       89,  251,   89,   89,  253,   89,   81,  255,   89,   89,
       89,   89,  256,   89,   89,   89,   89,  252,   89,   89,

      254,   89,  257,  258,   89,   89,   89,   89,  259,  260,
       66,  261,   89,   64,   89,   89,  265,   89,  264,   89,
       89,   89,   89,  262,   89,  263,   89,   89,  266,   89,
      267,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      270,   89,  272,  271,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  273,  275,   89,   89,  274,
       89,  276,  286,   89,   89,   89,   89,  277,   89,  278,
       89,  279,   89,   89,   89,   89,  280,   89,  282,   89,
      281,   89,   63,   89,   89,   60,   89,   89,  283,   89,
       89,  284,   89,  287,   89,   89,   89,   89,  285,  288,

      289,   89,   89,  290,   89,   89,   58,   89,   89,  394,
       89,  291,  292,  293,   57,   89,   89,   57,   89,   89,
       89,   89,   89,   89,  294,   89,   89,  295,   89,  296,
       89,   89,   89,  297,   89,  298,  299,  301,  300,   89,
      302,   89,  394,   89,  303,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  304,
       89,  305,   89,  308,  311,  309,  306,   89,  310,   89,
      307,   89,  394,   89,   89,   89,   89,   89,   89,  314,
       89,   89,  312,   89,  313,   89,   89,   89,   89,  394,
       89,   89,   89,   89,   89,  317,   89,   89,   89,   89,

       89,  318,   89,  319,   89,   89,  320,   89,  321,  322,
      323,  324,   89,  394,   89,   89,   89,   89,   89,  325,
       89,   89,   89,   89,   89,   89,   89,   89,  326,  394,
      333,   85,   89,  329,   89,   86,   87,  394,   88,   89,
       89,   89,   89,  330,   89,   89,   89,   89,   89,  331,
       89,   89,  332,   89,  334,  394,  327,   89,  335,   89,
       89,  336,   89,  328,   89,  337,   89,  339,   89,   89,
       89,   89,   89,  338,   89,  340,  341,   89,  342,   89,
       89,  344,   89,   89,  343,   89,   89,  346,   89,  345,
       89,  347,   89,   89,   89,   89,   89,   89,  349,   89,

       89,   89,   89,   89,  348,  394,  351,   89,   89,   89,
       89,   89,  350,   89,   89,   89,   89,   89,  394,   89,
       89,   89,   89,   89,   89,   89,  354,   89,  394,   89,
       89,  355,   89,   89,   89,   89,   89,  356,   89,   89,
       89,   89,   89,  359,   89,   89,  360,   89,  361,  362,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  363,
       89,   89,   89,   89,   89,  364,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  394,   89,   89,   89,   89,
       89,   89,  366,   89,   89,  365,   89,   89,  368,   89,
      394,  367,  374,   89,  394,   89,   89,  369,   89,  394,

       89,  370,   89,   89,   89,   89,   89,   89,  378,   89,
       89,  371,   89,   89,  394,   89,   89,  375,   89,   89,
      380,   89,   89,  382,   89,  379,   89,   89,   89,   89,
      381,   89,   89,   89,   89,   89,   89,   89,   89,  383,
       89,  384,   89,  385,   89,  387,   89,  387,   89,  390,
       89,   89,  391,   89,   89,   89,   89,   89,   89,  394,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,  387,   89,  387,
       89,   89,  394,   89,   56,   56,   56,   56,   56,   56,
       56,   56,   59,   59,   59,   59,   59,   59,   59,   59,

       65,   65,   65,   65,  394,   65,   65,   65,   89,   89,
       89,  394,   89,   89,   89,  142,  142,  394,  394,  394,
      142,  142,  144,  144,  394,  394,  394,  144,  144,  145,
      145,  394,  145,  145,  145,  145,  145,  148,  148,  213,
      213,  213,  214,  214,  214,  372,  372,  394,  372,  372,
      372,  372,  372,  386,  386,  394,  386,  386,  386,  386,
      386,    5,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394
    } ;

static const flex_int16_t yy_chk[1121] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   18,
      392,   22,   20,   11,   26,   26,   22,  388,   18,   20,
       20,   22,   23,  377,   23,   23,   24,  376,   24,   24,
       28,   28,   29,   29,   29,   34,   36,   34,   34,   29,
       34,   36,   39,   29,   29,   39,   29,   39,  358,   41,

       36,  357,   41,   36,   41,   36,  353,   23,   33,   33,
       33,   75,   75,   35,   35,   33,   42,  328,   42,   33,
       33,   35,   33,   37,   35,   37,   38,   35,  327,   37,
       35,   37,   35,   44,   37,   44,   38,   44,   40,   38,
      316,   38,   38,   43,   38,   40,   49,   43,  315,   40,
       49,   40,   49,   33,  269,   33,   47,   45,   45,   43,
       45,   43,   46,  268,   47,   47,   96,   46,   67,   67,
       67,  146,  146,   47,   47,   47,   89,   47,   89,   46,
       48,   46,   96,   48,   96,   50,   69,   69,   69,  212,
       50,   48,   48,   50,   48,   50,   51,   76,   48,   76,

       76,   51,   78,  211,   78,   78,   91,   91,   91,   84,
       51,   94,   51,   84,   84,   90,   84,   93,   92,   97,
       90,   92,   90,   92,   98,   94,   99,   94,   98,   93,
       98,   93,   95,   95,   95,   97,  100,   97,  147,  147,
       99,  100,   99,  101,  102,  101,  102,  100,  103,  100,
      103,  104,  105,  104,  104,  104,  106,  139,  105,  106,
      105,  106,  107,  107,  108,  107,  109,  109,  109,  110,
      111,  110,  108,  112,  108,  138,  111,  111,  111,  112,
      113,  113,  113,  112,  114,  112,  115,  116,  115,  114,
      115,  114,  117,  118,  120,  119,   88,  117,  121,  116,

      117,  116,  117,   87,  120,  120,  120,  123,  118,  119,
      118,  119,  121,  122,  121,  124,  122,  123,  122,  123,
      126,  141,  141,  141,  123,  126,  125,  126,   83,   79,
      124,  124,  127,  124,  125,  128,  125,  128,  130,  127,
      127,  128,  127,  129,  131,  129,  130,  129,  130,  134,
      132,  132,  131,  132,  131,  133,  135,  133,  134,  153,
      134,  153,  156,  133,  135,  133,  135,  143,  143,  143,
      154,  155,  157,  154,  161,  154,  161,  155,  156,  155,
      156,  158,  159,  160,  160,   65,  160,  163,  157,   62,
      157,  164,  165,  158,   61,  158,  159,  166,  159,  162,

      162,  162,   59,  163,  165,  163,  165,  164,  167,  164,
      168,  170,  166,  169,  166,  168,  171,  168,  171,  169,
      167,  169,  167,  170,  172,  170,  173,  174,  173,  175,
      180,  177,  175,  177,  175,  176,  178,  179,  178,  174,
      172,  174,  172,  176,  181,  176,  180,  179,  180,  179,
      182,  187,  182,   57,  183,  183,  181,  183,  181,  184,
      186,  184,  184,  185,  185,  185,  186,  187,  186,  187,
      188,  189,  190,  189,  191,  191,   53,  191,  188,  192,
      188,  193,  195,  192,  195,  192,   27,  197,  190,  197,
      190,  197,  198,  193,  198,  193,  194,  194,  194,  196,

      196,  196,  199,  200,  201,  199,  201,  199,  202,  203,
       17,  204,  203,   13,  203,  200,  208,  200,  207,  204,
      202,  204,  202,  205,  206,  206,  206,  205,  209,  205,
      210,  207,  208,  207,  208,  215,  210,  215,  210,  216,
      217,  216,  220,  218,  209,  218,  209,  217,  219,  217,
      219,  220,  221,  220,  221,  222,  224,  222,  223,  223,
      223,  225,  238,  225,  224,  226,  224,  226,  227,  227,
      227,  228,  229,  230,  229,  230,  231,  228,  233,  228,
      232,  232,   12,  232,  231,   10,  231,  234,  234,  234,
      233,  235,  233,  239,  236,  235,  236,  235,  237,  240,

      241,  240,  237,  242,  237,  238,    9,  238,  239,    5,
      239,  243,  244,  245,    4,  245,  241,    3,  241,  242,
      244,  242,  244,  243,  246,  243,  246,  247,  247,  248,
      247,  248,  249,  249,  249,  250,  251,  253,  252,  251,
      254,  251,    0,  256,  255,  256,  252,  250,  252,  250,
      255,  253,  255,  253,  254,  257,  254,  257,  258,  257,
      258,  259,  263,  260,  263,  261,  259,  260,  262,  260,
      259,  264,    0,  264,  259,  261,  259,  261,  262,  267,
      262,  265,  265,  265,  266,  266,  270,  266,  270,    0,
      272,  267,  272,  267,  271,  271,  271,  273,  274,  273,

      274,  275,  276,  276,  276,  275,  277,  275,  278,  279,
      280,  281,  277,    0,  277,  281,  282,  281,  282,  284,
      278,  279,  278,  279,  280,  283,  280,  283,  285,    0,
      291,  286,  284,  287,  284,  286,  286,    0,  286,  287,
      285,  287,  285,  288,  291,  288,  291,  288,  289,  289,
      289,  290,  290,  290,  292,    0,  286,  293,  293,  293,
      294,  294,  294,  286,  297,  295,  297,  298,  292,  295,
      292,  295,  296,  296,  296,  299,  300,  301,  301,  301,
      298,  303,  298,  304,  302,  304,  299,  306,  299,  305,
      300,  307,  300,  302,  308,  302,  308,  303,  311,  303,

      306,  305,  306,  305,  309,    0,  313,  307,  309,  307,
      309,  310,  312,  310,  311,  314,  311,  314,    0,  317,
      312,  317,  312,  313,  318,  313,  318,  319,    0,  319,
      320,  320,  320,  321,  322,  321,  322,  323,  324,  325,
      324,  325,  326,  329,  326,  323,  330,  323,  331,  332,
      334,  331,  334,  331,  335,  329,  335,  329,  333,  333,
      333,  332,  330,  332,  330,  336,  337,  338,  337,  338,
      339,  340,  339,  340,  341,    0,  341,  336,  342,  336,
      342,  343,  345,  343,  344,  344,  344,  346,  348,  346,
        0,  347,  354,  345,    0,  345,  347,  349,  347,    0,

      348,  350,  348,  349,  354,  349,  354,  350,  360,  350,
      351,  351,  351,  355,    0,  355,  356,  356,  356,  359,
      363,  359,  360,  365,  360,  361,  361,  362,  361,  362,
      364,  364,  363,  364,  363,  365,  366,  365,  366,  367,
      369,  368,  369,  370,  371,  373,  371,  373,  374,  378,
      374,  367,  380,  367,  368,  370,  368,  370,  375,    0,
      375,  378,  379,  378,  379,  380,  381,  380,  381,  382,
      383,  382,  383,  384,  385,  384,  385,  387,  390,  387,
      390,  391,    0,  391,  395,  395,  395,  395,  395,  395,
      395,  395,  396,  396,  396,  396,  396,  396,  396,  396,

      397,  397,  397,  397,    0,  397,  397,  397,  398,  398,
      398,    0,  398,  398,  398,  399,  399,    0,    0,    0,
      399,  399,  400,  400,    0,    0,    0,  400,  400,  401,
      401,    0,  401,  401,  401,  401,  401,  402,  402,  403,
      403,  403,  404,  404,  404,  405,  405,    0,  405,  405,
      405,  405,  405,  406,  406,    0,  406,  406,  406,  406,
      406,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 3 "lexer.l"
	#include<string.h>
    struct Table{
        int index;
        char* name;
        int address;
    };
    //using namespace std;
	int line=1;
    int column = 0;
    int yywrap();
    int isdigit(char s);
    int wasdigit(const char* s1);
    int check(const char* y,const char* str);
    int plusplus(const char* y,const char* str);
    #define MMAX 200
    struct Table hashTable[MMAX];
    void init_hashTable(Table* hT);
    int get_index(char* text,int length);
    void get_n(char* text,int length);
#line 796 "lex.yy.cc"

#line 798 "lex.yy.cc"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 155 "lexer.l"

#line 933 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 395 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1062 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 156 "lexer.l"
{++line;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("line%02d:   zhushi    %s    \n",line,yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("line%02d:   duohangzhushi    \n",line);BEGIN COMMENT;}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 159 "lexer.l"
{get_n(yytext,yyleng);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 160 "lexer.l"
{BEGIN INITIAL;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 161 "lexer.l"
{
    printf("DECIMAL %s %d %d %s\n", yytext, line, column, yytext);
    column += strlen(yytext);  // 更新列号
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 165 "lexer.l"
{
    printf("HEX %s %d %d %s\n", yytext, line, column, yytext);
    column += strlen(yytext);  // 更新列号
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("line%02d:   REAL    %s    \n",line,yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("line%02d:   HEADFILE    %s    \n",line,yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("line%02d:   DEFINE    %s    \n",line,yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("line%02d:   LB    %s    \n",line,yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("line%02d:   LP    %s    \n",line,yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("line%02d:   RB    %s    \n",line,yytext);} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("line%02d:   RP    %s    \n",line,yytext);} 
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 176 "lexer.l"
{check(yytext,"PLUS");}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 177 "lexer.l"
{check(yytext,"MINUS");}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 178 "lexer.l"
{check(yytext,"MULT");}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "lexer.l"
{check(yytext,"BITAND");}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("line%02d:   DIV    %s    \n",line,yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("line%02d:   MOD    %s    \n",line,yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("line%02d:   PLUSA    %s    \n",line,yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("line%02d:   MINUSA    %s    \n",line,yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("line%02d:   MULA    %s    \n",line,yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("line%02d:   DIVA    %s    \n",line,yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("line%02d:   MODA    %s    \n",line,yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("line%02d:   LS    %s    \n",line,yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("line%02d:   RS    %s    \n",line,yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("line%02d:   LSA    %s    \n",line,yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("line%02d:   RSA    %s    \n",line,yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("line%02d:   NOT    %s    \n",line,yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("line%02d:   BITOR    %s    \n",line,yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("line%02d:   XOR    %s    \n",line,yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("line%02d:   COMPL    %s    \n",line,yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("line%02d:   AND    %s    \n",line,yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("line%02d:   OR    %s    \n",line,yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("line%02d:   LT    %s    \n",line,yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("line%02d:   LE    %s    \n",line,yytext);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("line%02d:   GT    %s    \n",line,yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("line%02d:   GE    %s    \n",line,yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("line%02d:   EQ    %s    \n",line,yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("line%02d:   NE    %s    \n",line,yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("line%02d:   ASSIGN    %s    \n",line,yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("line%02d:   DOT    %s    \n",line,yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("line%02d:   MS    %s    \n",line,yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("line%02d:   LA    %s    \n",line,yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("line%02d:   RA    %s    \n",line,yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("line%02d:   UNARYPLUS    %s    \n",line,yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("line%02d:   UNARYMINUS    %s    \n",line,yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("line%02d:   DEREFERECE    %s    \n",line,yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("line%02d:   ADDRESS    %s    \n",line,yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("line%02d:   COMMA    %s    \n",line,yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("line%02d:   SC    %s    \n",line,yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("line%02d:   ASM    %s    \n",line,yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("line%02d:   AUTO    %s    \n",line,yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("line%02d:   BOOL    %s    \n",line,yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("line%02d:   BREAK    %s    \n",line,yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("line%02d:   CASE    %s    \n",line,yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 219 "lexer.l"
{printf("line%02d:   CATCH    %s    \n",line,yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 220 "lexer.l"
{printf("line%02d:   CHAR    %s    \n",line,yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("line%02d:   CLASS    %s    \n",line,yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("line%02d:   CONST    %s    \n",line,yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 223 "lexer.l"
{printf("line%02d:   C_CAST    %s    \n",line,yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 224 "lexer.l"
{printf("line%02d:   CONTINUE    %s    \n",line,yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 225 "lexer.l"
{printf("line%02d:   DEFAULT    %s    \n",line,yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("line%02d:   DELETE    %s    \n",line,yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("line%02d:   DOUBLE    %s    \n",line,yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("line%02d:   D_CAST    %s    \n",line,yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 229 "lexer.l"
{printf("line%02d:   ELSE    %s    \n",line,yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("line%02d:   ENUM    %s    \n",line,yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("line%02d:   EXPLICIT    %s    \n",line,yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("line%02d:   EXTERN    %s    \n",line,yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("line%02d:   FALSE    %s    \n",line,yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("line%02d:   FLOAT    %s    \n",line,yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("line%02d:   FOR    %s    \n",line,yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("line%02d:   FRIEND    %s    \n",line,yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("line%02d:   GOTO    %s    \n",line,yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("line%02d:   IF    %s    \n",line,yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("line%02d:   INLINE    %s    \n",line,yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 240 "lexer.l"
{printf("line%02d:   INT    %s    \n",line,yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 241 "lexer.l"
{printf("line%02d:   LOG    %s    \n",line,yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("line%02d:   LONG    %s    \n",line,yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("line%02d:   MUTABLE    %s    \n",line,yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 244 "lexer.l"
{printf("line%02d:   NAMESPACE    %s    \n",line,yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 245 "lexer.l"
{printf("line%02d:   NEW    %s    \n",line,yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 246 "lexer.l"
{printf("line%02d:   OPERATOR    %s    \n",line,yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 247 "lexer.l"
{printf("line%02d:   PRIVATE    %s    \n",line,yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("line%02d:   PROTECTED    %s    \n",line,yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 249 "lexer.l"
{printf("line%02d:   PUBLIC    %s    \n",line,yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 250 "lexer.l"
{printf("line%02d:   REGISTER    %s    \n",line,yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 251 "lexer.l"
{printf("line%02d:   R_CAST    %s    \n",line,yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 252 "lexer.l"
{printf("line%02d:   RETURN    %s    \n",line,yytext);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 253 "lexer.l"
{printf("line%02d:   SHORT    %s    \n",line,yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 254 "lexer.l"
{printf("line%02d:   SIGNED    %s    \n",line,yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 255 "lexer.l"
{printf("line%02d:   SIZEOF    %s    \n",line,yytext);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 256 "lexer.l"
{printf("line%02d:   STATIC    %s    \n",line,yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 257 "lexer.l"
{printf("line%02d:   S_CAST    %s    \n",line,yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 258 "lexer.l"
{printf("line%02d:   STRUCT    %s    \n",line,yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 259 "lexer.l"
{printf("line%02d:   SWITCH    %s    \n",line,yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 260 "lexer.l"
{printf("line%02d:   TEMPLATE    %s    \n",line,yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 261 "lexer.l"
{printf("line%02d:   THIS    %s    \n",line,yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 262 "lexer.l"
{printf("line%02d:   THROW    %s    \n",line,yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 263 "lexer.l"
{printf("line%02d:   TRUE    %s    \n",line,yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 264 "lexer.l"
{printf("line%02d:   TRY    %s    \n",line,yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 265 "lexer.l"
{printf("line%02d:   TYPEDEF    %s    \n",line,yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 266 "lexer.l"
{printf("line%02d:   TYPEID    %s    \n",line,yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 267 "lexer.l"
{printf("line%02d:   TYPENAME    %s    \n",line,yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 268 "lexer.l"
{printf("line%02d:   UNION    %s    \n",line,yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 269 "lexer.l"
{printf("line%02d:   UNSIGNED    %s    \n",line,yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 270 "lexer.l"
{printf("line%02d:   USING    %s    \n",line,yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 271 "lexer.l"
{printf("line%02d:   VIRTUAL    %s    \n",line,yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 272 "lexer.l"
{printf("line%02d:   VOID    %s    \n",line,yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 273 "lexer.l"
{printf("line%02d:   VOLATILE    %s    \n",line,yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 274 "lexer.l"
{printf("line%02d:   WCHAR_T    %s    \n",line,yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 275 "lexer.l"
{printf("line%02d:   WHILE    %s    \n",line,yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 276 "lexer.l"
{printf("line%02d:   LONGLONG    %s    \n",line,yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 277 "lexer.l"
{printf("line%02d:   LONGDOUBLE    %s    \n",line,yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 278 "lexer.l"
{printf("line%02d:   IDENTIFIER    %s    0x%d\n",line,yytext,get_index(yytext,yyleng));}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 279 "lexer.l"
{plusplus(yytext,"POSINC");}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 280 "lexer.l"
{plusplus(yytext,"POSDEC");}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 281 "lexer.l"
{plusplus(yytext,"PREINC");}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 282 "lexer.l"
{plusplus(yytext,"PREDEC");}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 283 "lexer.l"
{printf("line%02d:  STRING    %s    \n",line,yytext);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 284 "lexer.l"
{printf("line%02d:  CHARACTER    %s    \n",line,yytext);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 285 "lexer.l"
{}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 286 "lexer.l"
ECHO;
	YY_BREAK
#line 1634 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 395 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 395 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 394);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "lexer.l"


void init_hashTable(Table* hT){
    for(int i = 0;i<MMAX;i++){
        hT[i].name = new char[20];
        strcpy(hT[i].name,"0");
        hT[i].index = 0;
    }
};

int get_index(char* text,int length){
    int hash = 0;
    for(int i = 0;i<length;i++){
        hash += (text[i] - 'A' + 1) * (i + 1);
    }
    hash %= MMAX;
    while(1){
        if(strcmp(hashTable[hash].name,"0")==0){
            strcpy(hashTable[hash].name,text);
            return hash;
        }
        else{
            if(strcmp(hashTable[hash].name,text)==0){
                return hash;
            }
            else{
                hash=(hash+1)%200;
            }
        }
    }
};
void get_n(char* text,int length){
    if(text[0]=='\n'){
        ++line;
    }
};
int yywrap(){
	return 1;
}
int wasdigit(const char* s1) {
    int len=strlen(s1);
    int t=0;
    for(int i=0;i<len;++i) { 
        if(!isdigit(*(s1+i))&&*(s1+i)!='.')
            return 0;
        if(*(s1+i)=='.')
            ++t;
        if(*(s1+i+1)=='.') {
            ++t;
            ++i;
            if(t>1)
              return 0;
        }
    }
    return 1;
}
int check(const char* y,const char* str) {
	// 消除 + - * & 二义性
    int len=strlen(y);
    char id[len];
    for(int i=0;i<len-1;++i){
        id[i]=*(y+i);
    }
    id[len-1]='\0';
    
    if(!wasdigit(id))
        printf("line%02d:   IDENTIFIER    %s    0x%d\n",line,id,get_index(id,len-2));
    else 
        printf("line%02d:   num    %s    %s\n",line,id,id);
    printf("line%02d:   %s   %c    %c\n",line,str,y[len-1],y[len-1]);
    return 0;
}
int plusplus(const char* y,const char* str){
  //识别a++和++a
    int len=strlen(y);
    if(y[0] == '+' || y[0] == '-'){
        printf("line%02d:   %s   %c%c  \n",line,str,y[0],y[1]);
        char id[len-1];
        for(int i=2;i<len;i++){
            id[i-2] = y[i];
        }
        id[len-2] = '\0';
        printf("line%02d:   IDENTIFIER    %s    %s\n",line,id,id);
    }
    else{
        char id[len-1];
        for(int i=0;i<len-2;i++){
            id[i] = y[i];
        }
        id[len-2] = '\0';
        printf("line%02d:   IDENTIFIER    %s    %s\n",line,id,id);
        printf("line%02d:   %s   %c%c  \n",line,str,y[len-1],y[len-2]);
    }
    return 1;
}
int isdigit(char s){
    if('0'<=s&&s<='9') return 1;
    return 0;
}
int main(int argc,char*argv[]) {
    if(argc!=2){
        printf("File's name WRONG.Please input correct name.\n");
        return 1;
    }
    printf("单词    词素    属性\n");
	int n = 1;
	yyFlexLexer lexer;
	
	init_hashTable(hashTable);
	freopen(argv[1],"r",stdin);
		
	n = lexer.yylex();
		
	freopen("CON","r",stdin);
	
	system("pause");
	return n;
}
